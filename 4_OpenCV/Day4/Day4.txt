영상의 화소 처리 기법

화소 처리(Point processing)
입력 영상의 특정 좌표 픽셀값을 변경하여 출력 영상의 해당 좌표 픽셀값으로 설정하는 영상

1. 결과 영상의 픽셀값이 정해진 범위에 있어야 함
2. 반전, 밝기 조절, 명암비 조절등

1_밝기 조절
영상을 전체적으로 더욱 밝거나 어둡게 만드는 연산

    cv2.add(src1, src2, dst=None, mask=None, dtype=None)
    src1 : 첫번째 영상 또는 스칼라(입력)
    src2 : 두번째 영상 또는 스칼라(입력)
    dst : 덧셈 연산의 결과 영상(출력)
    mask : 마스크 영상
    dtype : 출력 영상의 타입
  ✔ 참고사항
  스칼라는 실수 값 하나 또는 실수 값으로 구성된 튜플
  dst를 함수 매개변수로 전달하려면 dst의 크기가 src1, src1와 같아야 함

2_영상의 산술 연산
덧셈 연산(add)
- 두 영상의 같은 위치에 존재하는 픽셀 값을 더해서 결과 영상의 픽셀값으로 설정
- 덧셈의 결과가 255보다 크면 픽셀값을 255로 설정(포화 연산)

가중치 합(addWeighted)
- 두 영상의 같은 위치에 존재하는 픽셀값에 대해서 가주합을 계산하여 결과 영상의 픽셀값으로 설정
- 보통 a + b = 1이 되도록 설정 -> 두 입력 영상의 평균 밝기를 유지

    cv2.addWeighted(src1, alpha, src2, beta, gamma, dst=None, dtype=None)
    src1 : 첫번째 영상
    alpha : 첫번째 영상 가중치
    src2 : 두번째 영상
    beta : 두번째 영상 가중치
    gamma : 결과 영상에 추가적으로 더할 값
    dst : 결과 영상

평균 연산
- 가중치를 a = b = 0.5로 설정한 가중치 합

뺄셈 연산(subtract)
- 두 영상의 같은 위치에 존재하는 픽셀값에 대하여 뺄셈 연산을 수행하여 결과 영상의 픽셀값으로 설정
- 뺄셈 결과가 0보다 작으면 픽셀값을 0으로 설정(포화 연산)

    cv2.subtract(src1, src2, dst=None, mask=None, dtype=None)

차이 연산(absdiff)
- 두 영상의 같은 위치에 존재하는 픽셀값에 대하여 뺄셈 연산을 수행한 후, 그 절댓값을 결과 영상의 픽셀값으로 설정
- 뺄셈 연산과 달리 입력 영상의 순서에 영향을 받지 않음(절댓값 때문에)

    cv2.absdiff(src1, src2, dst=None)

3_비트단위 AND, OR, XOR, NOT 연산

    cv2.bitwise_and(src1, src2, dst=None, mask=None)
    cv2.bitwise_or(src1, src2, dst=None, mask=None)
    cv2.bitwise_xor(src1, src2, dst=None, mask=None)
    cv2.bitwise_not(src1, src2, dst=None, mask=None)
  ✔ 각각의 픽셀값을 이진수로 표현하고 비트(bit)단위 논리 연산을 수행
  
